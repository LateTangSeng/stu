Stu versions are of the form X.Y.Z, where X is the major version, Y is
the minor version and Z the patch level.  For each new patch level, no
new features are added.  When the minor version is incremented, features
are added, which are documented in this file.  When the major version is
increased, backward-incompatible changes are made, which are documented
in the file MIGRATION. 

2016-05-01  Version 1.13:

* Dynamic phonies are now allowed.  The following is an example:

A :  [@x] { cp C A }
@x : B;
B = {C}
C = {correct}

This will create a file 'A' containing the text 'correct'. 

2016-04-26  Version 1.12:

* Copy rules:

A = B;

This will copy the file 'B' to 'A'.  This can be used with '!' and '&',
but not with '?':

A = !B;
A = &B;
A = directory/;

If the source ends in a slash, then it is interpreted as a directory and
it is searched for a file with the same name as the basename of the
target. 

2016-04-17  Version 1.11:

* Variable dependency can use explicit names:

A : $[X = B] { ... use $X here ... }

This will use the content of the file 'B' and make it available as the
content of the variable $X within the command for target 'A'. 

2016-04-17  Version 1.10:

* Content can be assigned to files using the following syntax:

A = { CONTENT ... }

This works only with file targets without dependencies, and without
output redirection.  

2016-03-26  Version 1.9:

* The algorithm for trivial dependencies (marked with '&') has been
  rewritten, fixing bugs in the previous version, in particular in
  relation to trivial dependencies included indirectly via phonies and
  dynamic dependencies. 
* Flags of variable dependencies can now also be specified outside the
  brackets.  For instance, '!$[X]' is now fully equivalent to '$[!X]'.
  Previously, '!$[X]' was an error.  This is true for all three flags,
  '!', '?', and '&'. 

2016-01-24  Version 1.8:

* Variable dependencies can now be enclosed in parentheses, as in
  '($[A])'.  This was not allowed before. 

2015-11-22  Version 1.7:

* A new flag '&', marks trivial dependencies.  '&' is used as a prefix,
  like '!' and '?'.  Trivial dependencies will never cause a target to
  be rebuilt, but if the target is rebuilt anyway, then they act like
  normal dependencies. They are intended for configuration files
  containing e.g. flags and paths. 

2015-10-22  Version 1.6:

* Both the -f option and the %include directive now allow directories as
  parameters, and will read the file 'main.stu' within them.

2015-10-19  Version 1.5:

* The syntax now allows parentheses (only for grouping, no other
  semantics).  The can contain any number of other dependencies.
  Example:

      (A [B] [(C)]) 

  is equivalent to

      A [B] [C]

* Brackets can contain multiple expressions, e.g. [A B C].  This is
  equivalent to [A] [B] [C].
* The attributes '?' and '!' can be used as prefix operators at any
  level inside and outside brackets, with differing semantics.  For
  instance, the three following line have different meaning:
    [?A]   # The dependency 'A' is optional
    ?[A]   # The dependencies read from 'A' are optional
    ?[?A]  # Combination of the two
* Much code related to dynamic dependencies was rewritten, in particular
  related to options '?' and '!' as well as multiply dynamic
  dependencies.  As a result, many bugs related to these features were
  fixed. 

2015-06-10  Version 1.4

* Parentheses are supported and may contain multiple filenames.
  Brackets may contain multiple filenames.  Existence-only dependencies
  are transitive through phonies and parentheses. 

2015-06-05  Version 1.3

* Optional dependencies are supported, and use the prefix '?'.  Their
  semantics is:  If the dependency does not exist, it is never created.
  If it already exists, it is processed normally (i.e., regenerated when
  it has to.)

2015-09-29  Version 1.2

* Input redirection is possible using the '<' operator, which must be
  put in front of a file dependency which is then used as standard input
  for the command.  This cannot be used for phony dependencies, for
  variable dependencies or for dynamic dependencies (neither before them
  or within them).  When combined with '!', the redirection operator
  comes second, i.e., '!<A'.  This can be combined with the output
  operator '>' to write commands that consist only of a single call to a
  filter such as sed, tr or awk. 

2015-05-29  Version 1.1:

* Output commands directly into the target file using the '>'
  operator, to be used in front of the target filename.  Only for file
  rules, not for phonies.


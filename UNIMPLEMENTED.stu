#
# These are features that were decided not to be implemented at some
# point.  Many of these ideas are actually good, in particular the first
# categories, and we may revive them in the future.  When in doubt, we prefer 
# to *not* support a feature, as adding a feature in the future can
# always be done without breaking compatibility, whereas removing one is
# always backward-incompatible.  
#

#==== Normal features ====

# 
# An option (-u) to consider all targets up to date.  I.e., execute only the
# minimum to get the given files built. 
#

#
# Option -N:  dry run, but build dynamic dependencies.  Not clearcut
# because dynamic dependencies can also take long to build. 
#

#
# Option -B:  Remake all targets regardless of dates
#

#
# Line number syntax:  A preprocessor-like construct that gives a new
# filename and line number, such that error messages from Stu can point
# to the original file, not the generated file.  Analogous to the
# preprocessors #line directive.  Useful in dynamic dependencies. 
#

%line ...

#
# When accessing directories, maybe use not mtime, but something else?
#
# * when stat() succeeds and the file is a directory, use creation time
#   instead of modification time
# * this will make it impossible to build directories that are more than
#   just { mkdir -p }
#

#
# An option for automatic logging:  write all output (stdout/stderr) of
# commands to a file (a different file per target).  Use the -l option. 
#

#
# -m bfs (breadth-first order) and -m target (pseudotarget by target
# name) 
#

#
# Have a "clean" option that removes all files that can be rebuilt.
# Ironically, this may need to build dynamic dependency files first. 
#

#
# Option -W FILENAME:   What-if mode.  Pretend that file FILENAME has
# just been modified. 
#

#
# An option to make backups of otherwise deleted files.  (We would need
# to decide on a backup filename scheme.)
#

#
# Option -i:  ignore all errors, like POSIX Make
#

#
# When reporting an error, always report how the .stu file was included
# by another .stu file.  Use "light" traces in green, like GCC does.
# (Maybe only do this in a special mode.) 
#

#
# Make the argument to the -j option optional.  Reason for rejection:
# not possible with standard getopt(). 
#

#
# Rules are cumulative:  you can add additional dependencies, like in
# Make.  
#

data-$NAME.txt:  build {
	./build $NAME >data-$NAME.txt
}

data-$NAME.txt:  some-other-dependency; 

# We cannot have this feature, because this will then not work:
$NAME.bib:  { ... }
a.bib:  extra dependencies ... ;
# The intention is to add dependencies to only certain files, but the
# result would be to let the second rule override the first. 

#
# Mark this target to always be a timestamp-ignoring dependency 
#

-e data: { mkdir data }

# Alternatively, we may introduce the rule that for directories, the
# modification date is not used.  (Not a good idea because the date may
# be useful for directories in some cases.)

#
# Pass name of target and dependencies as $0 and $1, $2, etc. (?).  All
# of these can be passed to the shell after the -c option, but the
# problem is that $0 is used in error messages of the shell as the
# filename, which would give weird error messages.  It would thus be
# better to pass the place of the command in $0, if the -c option would
# support something similar to the #line proprocessor directive. 
#

#
# By default, the target @main is built, regardless of position in file.
# If @main does not exist, the first target is made (must be
# unparametrized)  We can also make it an error to build the first
# target automatically and always require @main.  
#
# Reason for rejecting:  This would break the pattern where a file can
# be executed as-is or included by another one. 
#

@main:  A B C;

#
# Allow flags outside of variable dependencies.  They are only allowed
# inside at the moment.  
#

A:  !$[B] { ... }

#
# Allow to combine '?' and '!'.  Reason for rejection:  This is not
# needed as it would mean the command for 'B' would never be executed,
# and 'B's existence or timestamp would also never be verified, making
# '?!B' a no-op, and likely a bug.  It may of course be useful as a
# corner case, so we may allow it in the future. 
#

A:  ?!B { ... }

#
# Set intersection with '&'.  Clashes with trivial dependencies and can
# be implemented indepently of Stu.  (Will not clash anymore in version 2.)
#

@x:  (A B C) & (B C D);
# is the same as
@x:  B C;

#
# Index-wise concatenation with '|'
#

@x:  (A B) | (X Y);
# is the same as
@x:  AX BY;

# This corresponds to the paste(1) command.  It is rarely useful,
# though.    

#
# Set difference, e.g. with '\'. 
#

@plots:  dat/plot.([dat/NETWORKS] \ enron).eps;

#
# When an error is output, the column number must take into account
# unicode characters.  In this example, the opening { must be reported
# to be at character 13.  This was implemented, but was decided to be
# too slow.  Also, first find a standard that prescribes how such output
# is to be made.  It actually makes more sense to report bytes, not
# characters. 
#

éäçöôüœß柏林: {

#
# Recursion at the rule level is not allowed at the moment, but could
# be.  The problem is how to recognize infinite recursion. 
#

# Example 1:  Recursion at the rule level is needed to implement correct
# C source dependency. 

# Example 2:  building A.gz.gz does not work. 
$NAME.gz:  $NAME {
	gzip -c $NAME >$NAME.gz
}
A:  {
    echo 'Hello, World!' >A
}

#
# Provide a set of include-stufiles for common tasks, such as C
# programs, tex projects, etc. 
#

#
# An option to remove the target before each execution.  Not needed. 
#

#
# Option -t:  touch instead of building, like POSIX Make
#

#
# Option -o FILENAME:    Never rebuild that file ("old")
#

#
# Option: -n: Dry run:  Don't run anything, but show the commands that
# would be run.  Problematic because of dynamic dependencies. 
#

#
# Chain of commands are useful for dynamic dependencies
#

@bidd:  [>dep.bidd]:  <NETWORKS { sed -e 's,^,bidd.,' }

#
# Input redirection for a dynamic dependency or list is catenation
#

>all.gz:  <[files] { gz }

# Not very useful since it can be emulated very simply using cat:
>all.gz:  [<files] { xargs cat | gz }

>A: <(B C) { sed -e '...' }

# With transient targets
>A: <@x { sed -e '...' }
@x:  D E F;

# With dynamic dependencies
>A:  <[deps] { sed -e '...' }
>deps { ... }

#
# Multiple assignment.  Needs to invoke the "cat" command.  That's not
# really problematic, as we already invoke the "cp" command. 
#

# Multiple names result in catenation
A = B C D;

# Combine with transient target
A = @x;
@x:  B C D;

# Combine with dynamic target
A = [X];
<X { echo B C D }

#
# Allow to handle symlinks as files in themselves, i.e., check for their
# own existence and their own timestamp.  This should not be the default
# as the current behaviour is more often useful, but should be available
# as a possibility. 
#

#
# Internationalization:  It would be possible to translate the
# user-facing text messages into many languages using gettext, etc.
# There is however no plan to do so at the moment. 
#

#
# Use backslash for quoting.  I.e., allow \X where X is any character
# outside of quotes to represent X. 
#

#==== New features that change extend Stu drastically ====

#
# Removeable files:  when a file carries the removeable flag, it does
# not need to be present.  
#

A: -R B;  B: C;  A: D;

# * When A is old, B does not exist, and C is new:  rebuild B and A.
# * When A is new, B does not exist, and C is old:  don't rebuild A.
# * When A is new, B does not exist, C is old, and D is very new:  rebuild
#   B and A. 

#
# Allow regular expressions in parameters, e.g. for single-character
# parameters.  This will also make it possible to allow contiguous
# parameters, and giving a list of possible values for a parametrized
# rule. 
#

# Allow contiguous parameters
list.${X:.}${Y:.} {
	compute -x $X -y $Y >list.${X}${Y}
}

# Exclude certain characters from parameter names 
web.${NETWORK:[^.]+}

# Specify a list of values
${NAME:ref|ukob|tuberlin}.bib:  bibs-A/${NAME}.bib
{ cp bibs-A/$NAME.bib $NAME.bib }
$NAME.bib:  bibs-B/$NAME.bib
{ cp bibs-B/$NAME.bib $NAME.bib }

# Exclude slashes
${NAME:[^/]+}.bib: ...;

#
# Fingerprinting instead of timestamps is a feature that is implemented by quite
# a few Make replacements.  This could also be combined with
# preprocessors which ignore whitespace, etc.  Can also be used for the
# commands embedded in Stu files, but then again we don't want to
# rebuild everything just because a command changed.  Another downside
# is that is needs Stu to go through every file in full, making Stu's
# runtime be linear in the file size.  At the moment, the runtime of Stu
# is independent of file size, but of course the command to generate a
# file is always linear in the file size.
#

#
# Let Stu itself be multithreaded.  Very complex to implement, and has
# only very little benefit since Stu already starts many processes.
# Would only make sense in scenarios with thousands of processes, which
# would only make sense on machines with thousands of cores. 
#

#
# A Stu server.  
# The current setup of Stu (and also Make) means that when nothing is to
# be done, Stu still has to walk the complete dependency tree and stat()
# every file.  For large projects, this may be come very slow.  Instead,
# have a Stu daemon which uses inotify or similar to notice changes.
# There are many practical issues with that, so that would be a huge
# change.  Would almost likely mean the server itself would do the
# building, and the client would only communicate with the server.  This
# also means the server would need to be multi-threaded.  This could
# also be used to build a Stu GUI (either local or via HTTP) that allows
# one to control a running Stu server. 
#

#
# How to declare additional command interpreters.  Note:  we may use
# another character than the backslash. 
#

A.mat:  B.mat C.mat 
\octave{
	% This command will be executed by the Octave wrapper, and
	% read/write the three matrices automatically. 
	A = B * C;
}

octave:  octave-command {
	# This will be executed whenever A.mat is built, and the three
	# variables used below will be filled by Stu with the dependencies,
	# the target and the command, which are worked on by the script
	# ./matlab to invoke Matlab accordingly. 
	./octave-command "$STU_DEPENDENCIES" "$STU_TARGET" "$STU_COMMAND"
}

# A shell script that converts command to correct Octave scripts.  E.g.,
# it will load B.mat and C.mat as the variables B and C, and will save
# the generated variable A into A.mat. 
octave-command;

# Interpreters can be chained
\matlab-or-octave:  \octave;

# This may get problematic with finding the end of a command when
# programming languages use unusual quoting mechanisms and ways of
# pairing parenthesis-like characters. 

#
# Nested rules.  Good for dependencies that are used only once. 
#

A: (B: C { cp C B}) (D: E {cp E D}) { cat B D >A }
# This is quite hard to read, honestly. 

#
# Alternative dependencies
#

A:  B | C { ... }
A:  (B C) | (D E) { ... }

#
# Transient targets can have content.  This will be executed at every Stu
# invocation. 
#

# Their definition:
@NAME = { linux }
@NAME2 = @NAME;
>@NAME { ./printname }

# Their use:
file:  <@NAME { sed -e '...' >file }
result.eps:  $[@NAME] { ./compute --name "$NAME" }

# This might be used like variables in Make, but the result will be that
# targets depending on them will always be rebuilt.  It would thus only
# make sense together with fingerprinting. 

# No very useful, since files can be used in exactly the same way, and
# without the problem of not remembering what was already done. 

#
# An option of Stu that generates a shell script from a Stu file that
# executes the content.  This can be done to any degree of fidelity to
# the Stu specification, i.e., always build everything, or actually
# check timestamps. 
#

#==== External features ====
#
# These features can be implemented outside of Stu using constructs
# supported by Stu.  Thus, there is no need to integrate them into Stu,
# and in fact supporting them would bloat Stu and and unnecessary
# dependencies to it. 
#

# 
# Things that can be implemented by simply using the appropriate
# commands: 
#
# * Compression, archiving, and encryption
# * Converting encodings, line endings, and processing escape sequences 
# * Limitations on runtime, memory usages and other resources by jobs
# * Calling interpreters or compilers for specific programming languages
#

#
# Things that can be implemented by rules in Stu:
#
# * Rules for configuring and compiling code
#

#
# These are features that were decided not to be implemented.  Many of
# these ideas are actually good, in particular the first category, and
# we may revive them in the future.  When in doubt, we prefer to *not*
# support a feature, as adding a feature in the future can always be
# done without breaking compatibility, whereas removing one is always
# backward-incompatible.
#

#==== Normal features ====

# 
# An option (-u) to consider all targets up to date.  I.e., execute only the
# minimum to get the given files built. 
#

#
# Option -N:  dry run, but build dynamic dependencies.  Not clearcut
# because dynamic dependencies can also take long to build. 
#

#
# When accessing directories, maybe use not mtime, but something else?
#
# * when stat() succeeds and the file is a directory, use creation time
#   instead of modification time
# * this will make it impossible to build directories that are more than
#   just { mkdir -p }
#
# Maybe:  introduce flags to use other timestamps than mtime. 
#

#
# Have a "clean" option that removes all files that can be rebuilt,
# based on the given Stu file.  Ironically, this may need to build
# dynamic dependency files first.  We may also just have a command line
# option to output a list of files that can be rebuilt, for instance to
# initialize a .gitignore file or similar.
#

#
# Option -W FILENAME:   What-if mode.  Pretend that file FILENAME has
# just been modified. 
#

#
# An option to make backups of otherwise deleted files.  (We would need
# to decide on a backup filename scheme.)
#

#
# An option to ignore all errors, like POSIX Make's -i.  That is a really
# far-reaching feature.  Wait until someones tells us their use-case for
# it.  My impression is that the corresponding feature of Make is used
# mainly to execute broken Makefile.  One could instead insert "exit 0"
# appropriately. 
#

#
# When reporting an error, always report how the .stu file was included
# by another .stu file.  Use "light" traces in green, like GCC does.
# (Maybe only do this in a special mode.)  (Also, this will become
# important later when import is implemented.)
#

#
# Make the argument to the -j option optional, to parallel GNU Make.
# Reason for not being implemented: not possible with standard getopt().
# Will be possible when/if Stu switches to something else than plain
# getopt().
#

#
# Rules are cumulative:  you can add additional dependencies, like in
# Make.  
#

data-$NAME.txt:  build {
	./build $NAME >data-$NAME.txt
}

data-$NAME.txt:  some-other-dependency; 

# We cannot have this feature, because the following will then not work:
$NAME.bib:  { ... }
a.bib:  extra dependencies ... ;
# The intention is to add dependencies to only certain files, but the
# result would be to let the second rule override the first.  

# On the other hand, this may be achieved by using a special flag for
# it, in which case it would be easy to implement. 

#
# Mark this target to always be a persistent dependency 
#

-p data: { mkdir data }

# Alternatively, we may introduce the rule that for directories, the
# modification date is not used.  (Not a good idea because the date may
# be useful for directories in some cases.)

# This can also work with other flags. 

#
# Pass name of target and dependencies as $0 and $1, $2, etc. (?).  All
# of these can be passed to the shell after the -c option, but the
# problem is that $0 is used in error messages of the shell as the
# filename, which would give weird error messages.  It would thus be
# better to pass the place of the command in $0, if the -c option would
# support something similar to the #line proprocessor directive. 
#

#
# By default, the target @main is built, regardless of position in file.
# If @main does not exist, the first target is made (must be
# unparametrized)  We can also make it an error to build the first
# target automatically and always require @main.  
#
# Reason for rejecting:  This would break the pattern where a file can
# be executed as-is or included by another one.  It would also be
# different from Make.  It would also introduce a needlessly hardcoded
# name for the default target.  Many Stu files use @all or @main, etc.  
#

@main:  A B C;

#
# Allow flags outside of variable dependencies.  They are only allowed
# inside at the moment.  The semantics would be the same. 
#

A:  -p $[B] { ... }

#
# Allow to combine -o and -p.  Reason for rejection:  This is not
# needed as it would mean the command for 'B' would never be executed,
# and 'B's existence or timestamp would also never be verified, making
# '-po B' a no-op, and likely a bug.  It may of course be useful as a
# corner case, so we may allow it in the future. 
#

A:  -po B { ... }

#
# Set intersection with '&'.  Can be implemented indepently of Stu.  We
# may implement it if there is demand for using this often in a sensible
# use-case. 
#

@x:  (A B C) & (B C D);
# is the same as
@x:  B C;

#
# Index-wise concatenation with '|'. 
#

@x:  (A B) | (X Y);
# is the same as
@x:  AX BY;

# This corresponds to the paste(1) command.  It is rarely useful,
# though.  

#
# Set difference, e.g. with '\'.  That's nice, but can easily be
# realized with sed(1)/grep(1), etc. 
#

@plots:  dat/plot.([dat/NETWORKS] \ enron).eps;

#
# When an error is output, the column number must take into account
# unicode characters.  In this example, the opening { must be reported
# to be at character 13.  This was implemented, but was decided to be
# too slow.  Also, first find a standard that prescribes how such output
# is to be made.  It actually makes more sense to report bytes, not
# characters, so that's what we'll do as long as there is no standard. 
#

éäçöôüœß柏林: {

#
# Recursion at the rule level is not allowed at the moment, but could
# be.  The problem is how to recognize infinite recursion. 
#

# Example 1:  Recursion at the rule level is needed to implement correct
# C source dependency. 

# Example 2:  building A.gz.gz does not work. 
$NAME.gz:  $NAME {
	gzip -c $NAME >$NAME.gz
}
A:  {
    echo 'Hello, World!' >A
}

#
# An option to remove the target before each execution.  Not needed. 
#

#
# Option -t:  touch instead of building, like POSIX Make
#

#
# Option -o FILENAME:    Never rebuild that file ("old").  Clashes with
# the "optional" flag. 
#

#
# Option: -n: Dry run:  Don't run anything, but show the commands that
# would be run.  Problematic because of dynamic dependencies. 
#

#
# Chain of commands are useful for dynamic dependencies.  Looks cool,
# would would lead to enormous complications for only a small benefit,
# and on top of that a lot of confusion. 
#

@bidd:  [>dep.bidd]:  <NETWORKS { sed -e 's,^,bidd.,' }

#
# Input redirection for a dynamic dependency or list is catenation. 
#

>all.gz:  <[files] { gz ; }

# Can be emulated very simply using xargs/cat:
>all.gz:  [<files] { xargs cat | gz ; }

>A: <(B C) { sed -e '...' ; }

# With transient targets
>A: <@x { sed -e '...' ; }
@x:  D E F;

# With dynamic dependencies
>A:  <[deps] { sed -e '...' }
>deps { ... }

#
# Multiple assignment.  Needs to invoke the "cat" command.  That's not
# really problematic, as we already invoke the "cp" command. 
#

# Multiple names result in catenation
A = B C D;

# Combine with transient target
A = @x;
@x:  B C D;

# Combine with dynamic target
A = [X];
<X { echo B C D }

#
# Allow to handle symlinks as files in themselves, i.e., check for their
# own existence and their own timestamp.  This should not be the default
# as the current behaviour is more often useful, but should be available
# as a possibility, probably using a new flag (-L). 
#

#
# Internationalization:  It would be possible to translate the
# user-facing text messages into many languages using gettext, etc.
# There is however no plan to do so at the moment.  However:  Use
# setlocale() would also mean that we can't use isspace() anymore, and
# we would have to roll our own space-detecting function.  Since Stu is
# used by developers, the demand for this would be minimal.  (I've
# always wondered by things like Make are even internationalized.)
#

#
# Use backslash for quoting.  I.e., allow \X where X is any character
# outside of quotes to represent X.  We're not doing it because there
# may be other uses for \.  On the other hand, the shell does it. 
#

#
# Features of interactive mode:
#  - Allow job control with any number of jobs, not just one.
#  - When a job is put into the background, have a command line that
#    allows things to be done:
#      - continue
#      - abort
#      - adding new jobs
#      - cancelling jobs
#      - getting info about a particular task
#      - load/remove rules
#      - garbage collection / update file system info
#      - show running jobs
#      - show statistics
#  - Allow to start directly into the command line, without targets to
#    build.
#  - Allow this language to be scripted, i.e., input a script that does
#    these things  
# This would actually not be that hard to implement, and would be really
# cool.  It could then also be used to implement a GUI on top of Stu, to
# inspect running jobs, etc. 
#

#
# Maybe enable explanations by default?  No.  Output should be terse by
# default. 
#

#
# Have an option to suppress warnings.  
#

#
# Option to ALWAYS build a target. 
#

#
# Variables of the flags that apply to all children, not just immediate
# ones.  
#

$ stu '+p A'

# will completely ignore timestamps in all files.  

# This will also cover cases that are implemented as options at the
# moment, e.g. -g: 

$ stu '+o A'

# is equivalent to

$ stu -g A

#
# Disable flags with '+' options
#

A: -o @x;
@x: +o B;

# Equivalent to
A: B;

#
# Some form of embedding the value of environment variables into names.
# The ${VAR} syntax is already taken by parameters, so maybe use $().
# We could also let parameters use $(VAR) and then have ${VAR} for
# environment variables, but that would be backward-incompatible. 
#

/home/$(USER)/.emacs = lib/ ; 

# Counterargument:  The syntax for parameters in Stu rules and in the
# shell commands should be identical.  Also, the path case can be
# realized via symlinks. 

#
# Option -A:  build all (non-parametrized) targets.
#

#
# A flag to ignore errors when a file already exists.  E.g. in the
# example below, when Stu is called and 'B' already exists and
# 'X'/'Y'/'Z' don't and cannot be generated, still consider 'B' up to
# date, and call the command for 'A'. 
#

A:  -x B { cp B A ; }
B: X Y Z { cat X Y Z >B ; }

#
# Implement '*' as alternative for concatenation. 
#

#
# Uppercase flag is recursive:
#

# Ignores timestamps recursively
A: -P B;

#==== New features that change/extend Stu drastically ====

#
# Glob patterns.  This only makes sense when the files found by globbing
# don't have rules for themselves, as then they would never be able to
# be built in the first place.  Thus, it can only be used for checking
# the files' timestamps.
#
# Only * and ? are needed, since both [] and {} can be replaced by ().
#
# Also, a glob executed at each invocation of Stu is not good.  It's
# slow and this is one of the Make antipatterns that Stu was created to
# avoid.  Better execute the glob once and place the result in a file,
# as can already be done. 
#

example:  *.c *.h
{
	cc example.c -o example 
}

# better:
example:  [FILES]
{
	cc example.c -o example
}
>FILES { echo *.c *.h ; }

#
# Allow non-file targets.  E.g., files within archives, or remote files.
# Would almost always need to incorporate some unwanted dependency, and
# be highly specific to a single use-case.  Instead of implementing this
# in Stu, a better implementation would be via mounting, or virtual
# filesystems, but that seems not to be a thing at the moment.  Make
# traditionally supports "ar" archives.
#

#
# Use C instead of C++.  This is tempting for simplicity and also out of
# principle.  What would be necessary:
#  - Write container classed indexed with strings, targets, and maybe
#    PIDs.
#  - Convert certain containers to arrays/linked lists. 
#  - More complex and error-prone memory management, in particular for
#    strings 
#  - A replacement for exceptions
#
# Remember:  Even GCC is written in C++ nowadays, so we are not in bad
# company.    
#

#
# Removeable files:  when a file carries the removeable flag, it does
# not need to be present.  Similar to the ".SECONDARY" flag in GNU
# Make.  We could also remove these automatically when they are not
# needed anymore. 
#

A: -R B;  B: C;  A: D;

# * When A is old, B does not exist, and C is new:  rebuild B and A.
# * When A is new, B does not exist, and C is old:  don't rebuild A.
# * When A is new, B does not exist, C is old, and D is very new:  rebuild
#   B and A. 

#
# Allow regular expressions in parameters, e.g. for single-character
# parameters.  This will also make it possible to allow contiguous
# parameters, and giving a list of possible values for a parametrized
# rule.
#
# The reason we don't implement it is that it opens a gigantic can of
# worms, with many follow-up questions, and the danger that people will
# use the regexps to embed a list of filenames in it (using the |
# operator), giving essentially the same anti-pattern of listing all
# possible filenames statically like in Make, only with a much worse
# syntax.  Currently, most cases can be programmed with the current
# facilities, but a few use cases exist that are not possible now, such
# as distinguishing lowercase from uppercase parameters, but then again
# such cases can be argued to be bad design in themselves. 
#

# Allow contiguous parameters
list.${X:.}${Y:.} {
	compute -x $X -y $Y >list.${X}${Y}
}

# Exclude certain characters from parameter names 
web.${NETWORK:[^.]+}

# Specify a list of values
${NAME:ref|ukob|tuberlin}.bib:  bibs-A/${NAME}.bib
{ cp bibs-A/$NAME.bib $NAME.bib }
$NAME.bib:  bibs-B/$NAME.bib
{ cp bibs-B/$NAME.bib $NAME.bib }

# Exclude slashes
${NAME:[^/]+}.bib: ...;

#
# Fingerprinting instead of timestamps is a feature that is implemented
# by quite a few Make replacements.  This could also be combined with
# preprocessors which ignore whitespace, etc.  Can also be used for the
# commands embedded in Stu files, but then again we don't want to
# rebuild everything just because a command changed.  Another downside
# is that it needs Stu to go through every file in full, making Stu's
# runtime be linear in the file size.  At the moment, the runtime of Stu
# is independent of file size, but of course the command to generate a
# file is always linear in the file size.  As many features in this
# file, this opens a enormous can of worms.  Another way to implement it
# is to compute a fingerprint when before executing the command, and
# then again after the command succeeds, and when the result is
# identical, then reset the timestamp of the file back to its old
# value. 
#

#
# Let Stu itself be multithreaded.  Very complex to implement, and has
# only very little benefit since Stu already starts many processes.
# Would only make sense in scenarios with thousands of processes, which
# would only make sense on machines with thousands of cores.  But still
# very sensible and maybe necessary one day, in principle.
#

#
# A Stu server.  The current setup of Stu (and also Make) means that
# when nothing is to be done, Stu still has to walk the complete
# dependency tree and stat() every file.  For large projects, this may
# become very slow.  Instead, have a Stu daemon which uses inotify or
# similar to notice changes.  There are many practical issues with that,
# so that would be a huge change.  Would almost likely mean the server
# itself would do the building, and the client would only communicate
# with the server.  This also means the server would need to be
# multi-threaded.  This could also be used to build a Stu GUI (either
# local or via HTTP) that allows one to control a running Stu server.
#
# May actually be trivial to implement once we have proper job
# control.  But not for now.
#

#
# The ability to declare additional command interpreters.  Note:  we may
# use another character than the backslash.
#
# A common theme among Make replacements is to hardcode specific,
# high-level, programming languages.  This makes certain applications
# very nice and elegant, namely those that use only features found in
# these languages.  The idea for Stu is to allow to use any programming
# language in commands, with a syntax that makes it easy to add new
# command interpreters.  What we don't want to have are hardcoded
# programming languages.
#
# There are many details to think about for this, and in general this
# type of feature pushes people to want to hardcode their favorite
# programming language in Stu, which we don't want.
#
# Here's a random example using Julia, assuming that "everything is a
# matrix". 
#

A.data:  B.data C.data 
\julia{
	% This command will be executed by the Julia wrapper, and
	% read/write the three matrices automatically. 
	A = B * C;
}

julia:  julia-command {
	# This will be executed whenever A.data is built, and the three
	# variables used below will be filled by Stu with the dependencies,
	# the target and the command, which are worked on by the script
	# ./julia-command to invoke Julia accordingly. 
	./julia-command "$STU_DEPENDENCIES" "$STU_TARGET" "$STU_COMMAND"
}

# A shell script that converts command to correct Julia scripts.  E.g.,
# it will load B.data and C.data as the variables B and C, and will save
# the generated variable A into A.data.
julia-command;

# Interpreters can be chained
\julia-or-octave:  \julia;

# This may get problematic with finding the end of a command when
# programming languages use unusual quoting mechanisms and ways of
# pairing parenthesis-like characters. 

#
# Nested rules.  Good for dependencies that are used only once. 
# This is quite hard to read, honestly, and mostly fulfills the fantasy
# of people who like deeply nested constructs.  
#

A: (B: C { cp C B}) (D: E {cp E D}) { cat B D >A }

#
# Alternative dependencies.  Would not be used often, and where it would
# be needed, it can be implemented using dynamic dependency.  On the
# other hand, the '|' operator is free... 
#

A:  B | C { ... }
A:  (B C) | (D E) { ... }

#
# Transient targets can have content.  This will be executed at every Stu
# invocation.  This is similar to the way variables worked in Stu 0. 
#
# This might be used like variables in Make, but the result will be that
# targets depending on them will always be rebuilt.  It would thus only
# make sense together with fingerprinting. 
#
# No very useful, since files can be used in exactly the same way, and
# without the problem of not remembering what was already done.  
#

# Their definition:
@NAME = { linux }
@NAME2 = @NAME;
>@NAME { ./printname }

# Their use:
file:  <@NAME { sed -e '...' >file }
result.eps:  $[@NAME] { ./compute --name "$NAME" }

#
# An option of Stu that generates a shell script from a Stu file that
# executes the content.  This can be done to any degree of fidelity to
# the Stu specification, i.e., always build everything, or actually
# check timestamps. 
#

#
# libstu:  have the functionality available as a library for C, or for
# any other programming language.  I would rather have a Stu server and
# any programming language can then communicate with the Stu server. 
#

#
# Input and output to transients as a way to implement pipe-like
# constructs.  
#

>@data.filtered:  <data
{
	sed -e '...' 
}

plot.eps:  <@data.filtered
{
	... -o plot.eps 
}

# We could also have Stu use pipes using current syntax, in order to
# execute two "connected" rules.
A:  <B { ./command-A --output A ; }
>B:    { ./command-B ; }
# Both commands may be executed in parallel by Stu, using pipes and
# tee-like behaviour

#==== External features ====

#
# These features can be implemented outside of Stu using constructs
# supported by Stu.  Thus, there is no need to integrate them into Stu,
# and in fact supporting them would bloat Stu and and unnecessary
# dependencies to it.
#
# If anything, the question we should ask for each of these features is
# not whether we should hardcode it into Stu, but how easily these
# things can be implemented using the Stu language.  If necessary, we
# may then extend the Stu language to make such implementations
# possible, and easy.
#

# 
# Things that can be implemented by simply using the appropriate
# commands: 
#
# * Compression, archiving, and encryption
# * Converting encodings, line endings, and processing escape sequences 
# * Limitations on runtime, memory usages and other resources by jobs
# * Calling interpreters or compilers for specific programming languages 
#

#
# Things that can be implemented by rules in Stu:
#
# * Rules for configuring and compiling code
#

#
# Run jobs in a distributed fashion, i.e., on different hosts.  The idea
# here would be to use any software for distributing jobs and call it
# for each Stu job.  This would slightly interfere with what Stu itself
# is doing, since a distributed job management system also has to decide
# when a job is executed.  Most also have dependency management
# capabilities. 
#

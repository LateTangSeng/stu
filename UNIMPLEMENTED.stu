#
# These are features that were decided not to be implemented at some
# point.  Many of these ideas are actually good, and we may revive them
# in the future.  When in doubt, we prefer 
# to *not* support a feature, as adding a feature in the future can
# always be done without breaking compatibility, whereas removing one is
# always backward-incompatible.  
#

#
# Use the full autoconf/automake/etc. toolchain for better portability. 
#
# Things to check for:
#    * USE_MTIM:  struct timespec
#    * -D_FILE_OFFSET_BITS=64 
#

#
# Option -i:  ignore all errors, like POSIX Make
#

#
# When reporting an error, always report how the .stu file was included
# by another .stu file.  Use "light" traces in green, like GCC does.
# (Maybe only do this in a special mode.) 
#

#
# Make the argument to the -j option optional.  (Reason for rejection:
# not possible with standard getopt()). 
#

#
# Rules are cumulative:  you can add additional dependencies, like in
# Make.  
#

data-$NAME.txt:  build {
	./build $NAME >data-$NAME.txt
}

data-$NAME.txt:  some-other-dependency; 

# We cannot have this feature, because this will then not work:
$NAME.bib:  { ... }
a.bib:  extra dependencies ... ;
# The intention is to add dependencies to only certain files, but the
# result would be to let the second rule override the first. 

#
# Mark this target to always be an existence-only dependency 
#

!data: { mkdir data }

# Alternatively, we may introduce the rule that for directories, the
# modification date is not used.  (Not a good idea because the date may
# be useful for directories in some cases.)

#
# Support nanosecond-precision timestamps by using struct
# stat::st_mtim.* instead of struct stat::st_mtime.  Code is written in
# timestamp.hh and can be enabled via USE_MTIM, but is disabled because
# common filesystems seems to give wrong timestamps. 
#

#
# Pass name of target and dependencies as $0 and $1, $2, etc. (?).  All
# of these can be passed to the shell after the -c option, but the
# problem is that $0 is used in error messages of the shell as the
# filename, which would give weird error messages.  It would thus be
# better to pass the place of the command in $0, if the -c option would
# support something similar to the #line proprocessor directive. 
#

#
# By default, the target @main is built, regardless of position in file.
# If @main does not exist, the first target is made (must be
# unparametrized)  We can also make it an error to build the first
# target automatically and always require @main.  
#
# Reason for rejecting:  This would break the
# pattern where a file can be executed as-is, or included by another
# one. 
#

@main:  A B C;

#
# Allow flags outside of variable dependencies.  They are only allowed
# inside at the moment.  
#

A:  !$[B] { ... }

#
# Allow to combine '?' and '!'.  Reason for rejection:  This is not
# needed as it would mean the command for 'B' would never be executed,
# and 'B's existence or timestamp would also never be verified, making
# '?!B' a no-op, and likely a bug.  It may of course be useful as a
# corner case, so we may allow it in the future. 
#

A:  ?!B { ... }

#
# Set intersection with '&'.  Clashes with trivial dependencies and can
# be implemented indepently of Stu. 
#

@x:  (A B C) & (B C D);
# is the same as
@x:  B C;

#
# Index-wise concatenation with '|'
#

@x:  (A B) | (X Y);
# is the same as
@x:  AX BY;

# This is not really useful, though

#
# Set difference with '\'
#

@plots:  dat/plot.([dat/NETWORKS] \ enron).eps;

#
# Allow regular expressions in parameters, e.g. for single-character
# parameters.  This will also make it possible to allow contiguous
# parameters, and giving a list of possible values for a parametrized
# rule. 
#

# Allow contiguous parameters
list.${X:.}${Y:.} {
	compute -x $X -y $Y >list.${X}${Y}
}

# Exclude certain characters from parameter names 
web.${NETWORK:[^.]+}

# Specify a list of values
${NAME:ref|ukob|tuberlin}.bib:  bibs-A/${NAME}.bib
{ cp bibs-A/$NAME.bib $NAME.bib }
$NAME.bib:  bibs-B/$NAME.bib
{ cp bibs-B/$NAME.bib $NAME.bib }

# Exclude slashes
${NAME:[^/]+}.bib: ...;

#
# When an error is output, the column number must take into account
# unicode characters.  In this example, the opening { must be reported
# to be at character 13.  This was implemented, but was decided to be
# too slow.  Also, first find a standard that prescribes how such output
# is to be made.  It actually makes more sense to report bytes, not
# characters. 
#

éäçöôüœß柏林: {

#
# Recursion at the rule level is not allowed at the moment, but could
# be.  The problem is how to recognize infinite recursion. 
#

# Example 1:  Recursion at the rule level is needed to implement correct
# C source dependency. 

# Example 2:  building A.gz.gz does not work. 
$NAME.gz:  $NAME {
	gzip -c $NAME >$NAME.gz
}
A:  {
    echo 'Hello, World!' >A
}

#
# Fingerprinting instead of timestamps is a feature that's implemented by quite
# a few Make replacements.  This could also be combined with
# preprocessors which ignore whitespace, etc.  Can also be used for the
# commands embedded in Stu files, but then again we don't want to
# rebuild everything just because a command changed. 
#

#
# Let Stu itself be multithreaded.  Very complex to implement, and has
# only very little benefit since Stu already starts many processes.
# Would only make sense in scenarios with thousands of processes, which
# would only make sense on machines with thousands of cores. 
#

#
# Provide a set of include-stufiles for common tasks, such as C
# programs, tex projects, etc. 
#

#
# The current setup of Stu (and also Make) means that when nothing is to
# be done, Stu still has to walk the complete dependency tree and stat()
# every file.  For large projects, this may be come very slow.  Instead,
# have a Stu daemon which uses inotify or similar to notice changes.
# There are many practical issues with that, so that would be a huge
# change.  Would almost likely mean the server itself would do the
# building, and the client would only communicate with the server.  This
# also means the server would need to be multi-threaded. 
#

#
# An option to remove the target before each execution.  Not needed. 
#

#
# Option -t:  touch instead of building, like POSIX Make
#

#
# Option -o FILENAME:    Never rebuild that file ("old")
#

#
# Option: -n: Dry run:  Don't run anything, but show the commands that
# would be run.  Problematic because of dynamic dependencies. 
#

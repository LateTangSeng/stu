This is information for working on Stu.

'TODO.stu' lists the next features to be implemented. 

'CODING' gives the coding standards used in Stu. 

==== SETUP ====

Stu uses the GNU Auto* tools.  For development, use "make -f
Makefile.devel".  Yes, the GNU Auto* tools lose on many grounds, and it
would be *much* nicer to use Stu instead, but obviously Stu should be
compilable without Stu.

Before pushing changes to Github:
* Increment the version number in VERSION
* Run 'make -f Makefile.devel' successfully

Version logic (see 'NEWS' for an explanation of version numbers): 
* Increment the patch version number for any changes
* Increment the minor version number when backward-compatible new syntax
  is introduced   
* Increment the major version number when backward-incompatible new
  syntax is introduced 

==== DEBUG VERSION ====

The file 'stu.debug' is the Stu executable with all debugging turned on,
i.e., with debugging symbols, all warnings enabled, etc.  The exact
flags for compiling this as set in 'Makefile.devel', and you will
probably have to tweak these flags if you are developing Stu on another
setup than the authors.

==== UNIT TESTS ====

Unit testing is described in 'sh/mktest'. 

To compile everything and run all unit tests, do this:

	make -f Makefile.devel all-test

It takes about ten minutes.   

The unit tests have additional requirements on the system than just
compiling Stu:   

* The unit tests assume that the file system supports UTF-8 filenames.
  Stu will work without such a file system, but you can't run the unit
  tests unless you remove the one offending test (test/unicode/).  
* You need to install the packages 'expect' and 'autoconf'.  On some
  systems, also 'tclsh'.  (Exact packages vary by operating system.)

If you run the tests and they fail, report that to Jérôme Kunegis
<kunegis@gmail.com>.     

Additionally, you can run 

	make -f Makefile.devel

to execute everything that the developers do, including rebuilding the
AutoConf files. 

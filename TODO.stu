#
# Allow a better integrated syntax on the command line after '--'.  This
# will complement the options -o/-p/-n/-0.
#
# Update Parser::get_target_dep(). 
#
# Write a tokenizer for it and use the usual parser.  The tokenizer
# should:
#    - recognize only the special characters -@[], and @ only at the
#      beginning of arguments, or after [ or ], etc.   
#    - treat whitespace within arguments as part of the name, and only
#      consider the separation between arguments to be whitespace
#    - don't support '$' or other syntax
#    - don't need space after flags 
#    - recognize '[' and ']' in the middle of the string, to denote
#      concatenation 
#    - Maybe even recognize ',' as a separator?  (because ' ' is not
#      available here) 
#

$ stu -- [ -n FILES ]
$ stu -- -o FILE
$ stu -- -oFILE    # Optional file 'FILE' 
$ stu -- [FILE]
$ stu [ FILE ]
$ stu -- [-oFILE]  # Optional dynamic file 'FILE'
$ stu -- list.[FILE]
$ stu -- @bidd.[dat/NETWORKS_family.edit]
$ stu -- '[ list.x ]'   # refers to file ' list.x '
$ stu -- '[ list.x]'   # refers to file ' list.x'
$ stu -- '[list.x ]'   # refers to file 'list.x '

#
# Bug observed with -m random:      many targets must be built, all
# depending on a single given target.   Using stu -m random, the target
# that all others need is built, and then Stu exists successfully,
# instead of building the rest. 
#

#=================== Further features =======================

#
# Test all 'switch' cases, like in the following.  This is really
# tedious (4*4*4*4 = 256 cases in total)
#

A:  -X <CCC>  -Y <CCC>  { ... }

# where:
#   -X and -Y are all possible combinations of transitive flags
#   <CCC> is one of:
#      (1) Direct dependency C
#      (2) Transient to C
#      (3) Dynamic dependency that contains C
#      (4) Concatenation that results in C

#
# Trace (logging): an option to write log messages into a file.  In
# particular, which commands failed. (option -T)
#

#
# Canonicalize names 
#
# - Fold multiple / to a single one, except exactly two at the beginning
# - Remove ending /, except in single '/'
# - Fold ., except for a single .
# - Fold */.. (.. at beginning stays)
# 
# (Don't do anything special with symlinks/hardlinks/etc.; they need
# syscalls to detect anyway.)
#
# Questions
#   - Should '/' match in parameters?  -> Yes
#   - Does that also apply to transient targets?  -> Yes
#

#      - aaa/.. ->  .
#      - aaa/../bbb -> bbb
#      - .. -> ..
#      - ../aaa -> ../aaa
#      - /../aaa -> /aaa
#      - aaa/bbb/../../ccc -> ccc
#      - . -> .
#      - ./ -> .
#      - aaa/. -> aaa
#      - aaa/ -> aaa
#      - ./aaa -> aaa
#      - .//aaa -> aaa
#      - ./. -> .
#      - aaa//bbb -> aaa/bbb
#      - //aaa -> //aaa
#      - ///aaa -> /aaa
#      - ////aaa -> /aaa
#      - // -> /
#      - /// -> /
#      - ./ -> .
#      - /. -> /
#      - aaa -> aaa
#      - aaa/bbb -> aaa/bbb
#      - / -> / 

# Test this:
dat/STATISTICS = ./; 
STATISTICS { ... }

#
# File import
#

# Import all rules from subdirectory; will prepend the directory name to
# all targets.  Rules from there will be executed from within the
# directory as current directory.  If using 'import', the meaning of
 
# All these are equivalent 
% import src/main.stu
% import src/
% import src
% include -d src/main.stu
% include -d src/
% include -d src

# - What about transient transient targets imported in that way.  Do we
#   prepend a directory to them?
%import dir   # contains:   @all:  ...;
# gets converted to:       @dir/all:  ...;
# or to:                   dir/@all:  ...;  # ???

#
# When including files using dynamic dependencies, make a
# difference between inclusion and import, as is done for %include and
# %import. 
#

A: [-d data/B];

#
# Search within predefined paths for %include ($STU_PATH or $STUPATH;
# the -I option)
#

# This is included from the "Stu path", and could be installed in
# e.g. /usr/share/stu/lib/ or ~/share/stu/lib/, etc. 
% include c++.stu
 
#
# -m bfs (breadth-first order) and -m target (pseudorandom by target
# name, i.e., same pseudorandom order for each target, as long as its
# dependencies are the same). 
#

#
# Line number and file syntax:  A preprocessor-like construct that gives a new
# filename and line number, such that error messages from Stu can point
# to the original file, not the generated file.  Analogous to the
# preprocessors #line directive.  Useful in dynamic dependencies. 
#

% file datasets.list
% line 120

# Use this in stu-utils/texdep and other stu-utils programs judiciously. 

#
# A 'why' option that shows why things are built.  Will look similar to
# error traces, only containing explanations.  In essence, output a line
# everytime one of the 'need_build' variables is updated.  Also, we need
# to do something smart with timestamps. 
#

# * 'abc' does not exist
# * 'abc' is older than its dependency 'xyz'
# * ...

#
# Have an option for: For hardcoded rules, compare the content of the
# file (if it exists) with the declared content, and regenerate the file
# if necessary.  This would avoid the usual error that a hardcoded rule
# is changed in a Stu script, but Stu doesn't notice that.  This would
# have add open/read/close() calls to the stat() we do at the moment. 
#

#
# Have an option to output the dependency graph, i.e., output each edge
# on a single like, e.g. separated by tab.  (Use it then to perform a network
# analysis of the KONECT-Analysis dependency graph.)
#

#
# In -j>1 mode, Start trivial dependencies immediately when it is clear
# they must be started, not just when everything else is done.
#

#
# A flag with the meaning "never rebuild that dependency", but only use
# it to determine whether we need to rebuilt the target.  It would mean
# that we can prune dependencies with that flag as soon as we know that
# the target must be built anyway.  
#

# In this example, when 'program' does not exist, Stu will *not* build
# 'dep.sources', because the -s flag is used and Stu knows that
# 'program' has to be rebuilt anyway.  '-s' could stand for
# "secondary", and mean "we don't want this to be built, we only need it
# to determine whether we have to be rebuilt."

program:  -s [dep.sources] {
	cc ... -o program
}
dep.sources {
	# Some complex mechanism for determining the source code files
	# of the program
}

#
# Have an extended safety mode, in which Stu checks that node of the
# dependencies themselves where touched by a command.  How deep should
# this go?  Should it also check dependency included dynamically?
#

#
# Have a way to set $STU_SHELL and $STU_CP from within a Stu script.
# E.g., using directives. 
#

# Some Stu scripts may want to use Bash throughout
% STU_SHELL /bin/bash

# Should it be valid for the whole Stu invocation, or only for the
# source file in which it appears?

#
# Does it make sense to have a way to set environment variables for all
# commands?  It would open us up to many additional questions, and
# potentially some Make-like anti-patterns.  In general, Stu directives
# are prone to implement anti-patterns, as what they do is global. 
#

% set PATH /usr/local/bin

#
# A "block" option, i.e., that block certain filename or transient
# patterns from being executed.  E.g., 
#
#   $ stu -B  @statistic.diam.$network
#
# Will make all names matching that patterns be considered as build
# failures immediately, without trying to build them. 
#

#
# Have a signal to stop Stu, but without interrupting currently running
# jobs.  I.e., let all currently running jobs finish, and then quit
# (with appropriate exit status).
#

# (There are no known bugs)

#=================== New features =======================

#
# Canonicalize names 
#
# Algorithm:
#  - Fold multiple / to a single one, except exactly two at the beginning
#  - Remove ending /, except when the name contains only '/' characters
#  - Fold ., except for a single '.'  (repeatedly)
#      - ^/.$ -> /
#      - ^./$ -> .
#      - ^./ -> ''  [multiple times]
#      - /.$ -> ''  [multiple times]
#      - /./ -> /   [multiple times]
#  - Fold .. that is not at the beginning (repeatedly)
#      - [^/]+/.. -> '' or '.' when otherwise empty
#
# At which points to apply:
#   - at parsing files [Parser::parse_name()]
#   - at parsing dynamic dependencies [same]
#   - at parsing dynamic dependencies with -n/-0 (same) [code is in
#     execution.hh; refactor to parser.hh]
#   - at parsing command line options / arguments [in stu.cc; migrate to
#     parser.hh]
# 
# Manpage:
#   - Don't do anything special with symlinks/hardlinks/etc.; they need
#     syscalls to detect anyway.
#   - '/' also matches in parameters
#   - The rules do not apply within parameters or across parameters and
#     non-parameter text
#   - The rules also apply to transient targets
#   - Canonicalization does not apply to %include files, -f files, and
#     other "non-targets". 
#

# Test by checking the output of the "file not found" message of Stu:
#      - aaa -> aaa
#      - aaa/.. ->  .
#      - aaa/../bbb -> bbb
#      - .. -> ..
#      - ../aaa -> ../aaa
#      - /../aaa -> /aaa
#      - aaa/bbb/../../ccc -> ccc
#      - aaa/bbb/ddd/../../../ccc -> ccc
#      - aaa/bbb/ddd/eee/../../../../ccc -> ccc
#      - aaa//bbb//ddd//eee//..//..//..//..//ccc -> ccc
#      - aaa//bbb/ddd//eee/..//../..//../ccc -> ccc
#      - aaa/../bbb/../ccc -> ccc
#      - aaa//..//bbb//..//ccc -> ccc
#      - aaa//../bbb//../ccc -> ccc
#      - . -> .
#      - ./ -> .
#      - /. -> /
#      - aaa/. -> aaa
#      - aaa/./. -> aaa
#      - aaa/././. -> aaa
#      - aaa/./././. -> aaa
#      - aaa/ -> aaa
#      - aaa// -> aaa
#      - aaa/// -> aaa
#      - aaa//// -> aaa
#      - ./aaa -> aaa
#      - ././aaa -> aaa
#      - ./././aaa -> aaa
#      - ././././aaa -> aaa
#      - .//aaa -> aaa
#      - .//.//.//.//aaa -> aaa
#      - ./. -> .
#      - aaa//bbb -> aaa/bbb
#      - aaa///bbb -> aaa/bbb
#      - aaa////bbb -> aaa/bbb
#      - /aaa -> /aaa
#      - //aaa -> //aaa
#      - ///aaa -> /aaa
#      - ////aaa -> /aaa
#      - / -> /
#      - // -> //
#      - /// -> /
#      - //// -> /
#      - aaa/bbb -> aaa/bbb
#      - aaa/./bbb -> aaa/bbb
#      - aaa/././bbb -> aaa/bbb
#      - aaa/./././bbb -> aaa/bbb
#      - aaa/./././bbb -> aaa/bbb
#      - aaa/./../bbb -> bbb
#      - aaa/.././bbb -> bbb
#      - aaa/./.././bbb -> bbb
#      - aaa//.//..//.//bbb -> bbb

# Test this:
dat/STATISTICS = ./; 
STATISTICS { ... }

# This is a duplicate target and not allowed
A = {111}
./A = {222}

A/B = {111}
A//B = {222}

# This is not an error; there is no duplicate rule
A: / { touch A ; }
/ { exit 0 ; }
// { exit 1; }

# Duplicate rule
A: / { touch A ; }
/ { exit 0 ; }
/// { exit 0 ; }

# Canonicalization is applied to command line arguments
$ stu ///
/ { exit 0 ; }

# Parametrized case: .${x}st.a does not match  ./list.a 
A: ./list.a { cp list.a A ; }
.${x}st.a { exit 1 ; }
>list.a { echo CORRECT ; }

# Matches
A: list.a { cp list.a A ; }
./list.$x { echo "$x" >./list."$x" ; }

# Does not match
A:  // { touch A ; }
/$x    { exit 1  ; }
//     { exit 0  ; }

# Normalized to the same thing, none is normalized
A: /// { touch A ; }
////   { exit 0  ; }

# Don't normalize '%include' parameters (check error message)
% include ksdhfk//shfkshfd
% include ksdksd/./jhdjshdjshd
% include jshdshd/../jhjshd

# In dynamic dependencies
A: [B] { cp list.X A ; }
B = {./list.X}
list.X = {CORRECT}

A: [-n B] { cat list.X list.Y list.Z >A ; }
>B { printf '%s\n%s\n%s\n' ./list.X .//list.Y xxx/../list.Z ; }
list.X = {xxx}
list.Y = {yyy}
list.Z = {zzz}

A: [-0 B] { cat list.X list.Y list.Z >A ; }
>B { printf '%s\0%s\0%s\0' ./list.X .//list.Y xxx/../list.Z ; }
list.X = {xxx}
list.Y = {yyy}
list.Z = {zzz}

# In the -F option
$ stu -F 'A=./list.X;list.X={CORRECT}'

# Remove ending /
>A:  list.X/ { ls -l list.X ; }
list.X { mkdir list.X ; touch list.X/www ; }

# Remove ending /'s
>A:  list.X// { ls -l list.X ; }
list.X { mkdir list.X ; touch list.X/www ; }

# Remove ending /'s
>A:  list.X/// { ls -l list.X ; }
list.X { mkdir list.X ; touch list.X/www ; }

# Remove ending /'s
>A:  list.X//// { ls -l list.X ; }
list.X { mkdir list.X ; touch list.X/www ; }

A: /. { cp X A ; }
/ { echo CORRECT >X ; }

A: ./ { touch A ; }

A: ./list.X { cp list.X A ; }
list.X = {CORRECT}

A: list.X/. { cp list.X/X A ; }
list.X { mkdir list.X ; touch list.X/X ; }

# 'B' is not a directory, but this works
A: B/. { cp B A ; }
B = {CORRECT}

A:  list.B/./X { cp list.B/./X A ; }
list.B/X { list.B ; touch list.B/X ; }

A:  ././B { cp B A ; }
B = {CORRECT}

A:  ./././B { cp B A ; }
B = {CORRECT}

A:  ././././B { cp B A ; }
B = {CORRECT}

A: B/./. { cp B A ; }
B = {CORRECT}

A: B/././. { cp B A ; }
B = {CORRECT}

A: B/./././. { cp B A ; }
B = {CORRECT}

A:  list.B/./. { cp list.B/X A ; }
list.B { mkdir list.B ; touch list.B/X ; }

A:  list.B/././. { cp list.B/X A ; }
list.B { mkdir list.B ; touch list.B/X ; }

A:  list.B/./././. { cp list.B/X A ; }
list.B { mkdir list.B ; touch list.B/X ; }

A:  list.B/././X { cp list.B/././X A ; }
list.B/X { mkdir list.B ; echo CORRECT >list.B.X ; }

A:  list.B/./././X { cp list.B/./././X A ; }
list.B/X { mkdir list.B ; echo CORRECT >list.B.X ; }

A:  list.B/././././X { cp list.B/././././X A ; }
list.B/X { mkdir list.B ; echo CORRECT >list.B.X ; }

A:  .. { touch A ; }

A: ../ { touch A ; }

A: ..// { touch A ; }

A:  jhdjshd/.. { touch A ; }

A:  jshdjshd/../B { cp B A ; }
B = {CORRECT}

A:  jshdjshd/sdsjd/../../B { cp B A ; }
B = {CORRECT}

A:  jshdjshd/sdsjd/iewsjdh/../../../B { cp B A ; }
B = {CORRECT}

A:  jshdjshd/../skdksjd/../B { cp B A ; }
B = {CORRECT}

A:  jshdjshd/../skdksjd/../bceycbee/../B { cp B A ; }
B = {CORRECT}

A:  jshdjshd//../B { cp B A ; }
B = {CORRECT}

A:  jshdjshd///../B { cp B A ; }
B = {CORRECT}

A:  jshdjshd////../B { cp B A ; }
B = {CORRECT}

A:  jshdjshd/./../B { cp B A ; }
B = {CORRECT}

A:  jshdjshd/././../B { cp B A ; }
B = {CORRECT}

A:  jshdjshd//.//.//../B { cp B A ; }
B = {CORRECT}

#
# File import
#

# Import all rules from subdirectory; will prepend the directory name to
# all targets.  Rules from there will be executed from within the
# directory as current directory.  If using 'import', the meaning of
 
# All these are equivalent 
% import src/main.stu
% import src/
% import src
% include -d src/main.stu
% include -d src/
% include -d src

# - What about transient transient targets imported in that way.  Do we
#   prepend a directory to them?
%import dir   # contains:   @all:  ...;
# gets converted to:       @dir/all:  ...;
# or to:                   dir/@all:  ...;  # ???

#
# When including files using dynamic dependencies, make a
# difference between inclusion and import, as is done for %include and
# %import. 
#

A: [-d data/B];

#
# Search within predefined paths for %include ($STU_PATH or $STUPATH;
# the -I option)
#

# This is included from the "Stu path", and could be installed in
# e.g. /usr/share/stu/lib/ or ~/share/stu/lib/, etc. 
% include c++.stu
 
#
# Line number and file syntax:  A preprocessor-like construct that gives a new
# filename and line number, such that error messages from Stu can point
# to the original file, not the generated file.  Analogous to the
# preprocessors #line directive.  Useful in dynamic dependencies. 
#

% file datasets.list
% line 120

# Use this in stu-utils/texdep and other stu-utils programs judiciously. 

#
# Have an option to output the dependency graph, i.e., output each edge
# on a single line, e.g. separated by tab.  (Use it then to perform a network
# analysis of the KONECT-Analysis dependency graph.)
#

#
# In -j>1 mode, Start trivial dependencies immediately when it is clear
# they must be started, not just when everything else is done.
#

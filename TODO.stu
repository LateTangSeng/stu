#==== Features of Stu 2:  Mandatory ====

#
# Option -n for \n-separated dynamic.  Do we need an option for ordinary
# dynamics?  
#

#
# Flag -0 for NUL-separated dynamic dependencies.  Also as command-line option. 
#

A: [ -0 <B ] { xargs -0 ... }

#
# Make 
#
#    A = -o B ;
#
# work:
#   * Fail when both A and B are not present
#   * Succeed when A is present and B is not
#   * Copy the file when B is present using the usual rules
#

#
# String multiplication.  String multiplication is to work both with the
# binary operator '*' as well with juxtaposition.  Juxtaposition is
# backward incompatible, as in Version 1 strings like "A[B]" where
# interpreted as two dependencies, and with it they will be interpreted
# as one. 
#

# - implement compound dependencies
# - implement compound targets, which are deleted when they are done
#   (they don't have a Target object)

A:  B * C;    	        # Binary multiplication operator
A:  B * (C D); 	        # Parentheses
A:  B[C];      	        # Juxtaposition
A:  [B]C;      	        # OK
A:  B(C D);    	        # OK
A:  B(C D)E;   	        # OK
A:  B[C]D;     	        # OK
A:  [B] * [C]; 	        # OK
A:  (A B) * (C D); 	# OK
A:  [B][C];             # OK
A:  (A B)(C D);         # OK
A:  (-p B) * (C);    	# OK
A:  (-o B) * (C);    	# OK
A:  (B) * (-p C);    	# error
A:  (B) * (-o C);    	# error
A:  (-o B) * (-p C);   	# error
A:  (<B) * (C);    	# OK
A:  (B) * (<C);    	# error
A:  -p B(C D);       	# OK
A:  -o B(C D);       	# OK
A:  <B(C);         	# OK
A:  <B(C D);       	# error
A:  @B(C);         	# OK
A:  @B(C D);     	# OK
A:  B * @C;      	# error 
A:  $[B] * C;    	# error
A:  B * $[C];    	# error
A:  <B * C;      	# OK (or maybe:  ambiguous)
A:  B * <C;      	# error
A:  <B[C];		# OK iff C contains exactly one dependency (or an error)
@A: @B[C];       	# OK
A:  B@C;		# error
A.$X.$Y:  $X * $Y       # OK (can be contiguous)
A.$X.$Y:  $X.a * b.$X   # OK (despite duplicate parameter) 
A.$X.$Y:  $X. * $Y      # OK
A.$X.$Y:  $X * .$Y      # OK

# More examples

@headers:  (config parse build).h

@plot.all:   @plot.[NETWORKS];

@plot:    plot/[NETWORKS].eps;

# Copy all *.dat files to the backup/ directory, but only if they don't
# exist yet, or if they have changed. 
@all: backup/[FILES];
>FILES: { echo *.dat }
dest/$file = $file;

#
# The 'trivial' flag '-t' should "go up" when applied to the
# dependencies of transient targets. 
#

# 'V' is built because 'A' does not exist. 
A: @x {
	[ -r V ] || {
		exit 1
	}

	cat V >A
}
@x:  -t V; 
V = {correct}

# 'V' is built 'A' does not exist.  The '-t' has to "go up". 
A: @x {
	[ "x$V" = xcorrect ] || {
		exit 1
	}

	echo "$V" >A
}
@x:  $[-t V];
V = {correct}

# The '-t' has to "go up".  Use this in KONECT. 
@all:   list.out;
>list.$name:
	@octave
{
	./list.octave Hello 
}
@octave:  -t ( list.octave $[P] );
list.octave 
{
	cat >list.octave <<EOF
#! /bin/sh
[ "x$P" = x... ] || {
	exit 1
}
echo "$@"
echo correct >A
EOF
	chmod u+x list.octave
}
P = {...}

# Even when a transient target has a command, the '-t' "goes up". 
A: @x {
	[ -r V ] && {
		exit 1
	}

	echo correct >A
}
@x:  -t V {
	echo Executing @x
}
V {
	exit 1
}

#
# Use the '+' sign to invert flags. 
#

# E.g.: Dynamic dependencies are "persistent" by default.  Make it
# possible to switch this off using '+e'.  This is useful when the
# dynamic dependency file itself is used by the target, e.g. when
# creating a tarball. 
A.tar: [ +p FILES ] { tar cfvv A.tar $(cat FILES) }

#
# What happens with relative and absolute pathnames?  When two names
# refer to the same file?  Do we need to 'normalize' (canonicalize) names?
#
# * fold ..
# * fold ., except for a single .
# * Remove ending / 
# * Fold multiple / to a single one, except exactly two at the beginning
# * don't touch symlinks/hardlinks/etc. (they need syscalls to detect anyway) 
#
# Question:  should '/' match in parameters?  -> Yes
#

# This will fail because ../../bib/$NAME.bib will match $NAME.bib.
# Instead, be able to write ./$NAME.bib
A:   a.bib b.bib c.bib;
$NAME.bib:  ../../bib/$NAME.bib { cp ... }
a.bib;

# Rules:
#     $NAME.bib:    a .bib file anywhere
#     ./$NAME.bib:  a .bib file in the current directory

# Remove trailing slash from directory names.
A:  -o tmp/ {...}
tmp: {...}

#
# File import
#

# Import all rules from subdirectory; will prepend the directory name to
# all targets.  Rules from there will be executed from within the
# directory as current directory.  If using 'import', the meaning of

# All these are equivalent 
% import src/main.stu
% import src/
% import src
% include -d src/main.stu
% include -d src/
% include -d src

#==== Features of Stu 2:  Other features ====

#
# Recursive persistent dependency:  If the file exists, never
# rebuild it, regardless whether its dependencies have to be rebuilt.
# Actual persistent dependencies do not work like this, as they only
# ignore the targets timestamp, but don't change anything about its
# dependencies.  
#

#
# Have an option to suppress warnings.  (which?)
#

#
# New flag to ALWAYS build a target.  (We may already have this?)
#

#
# When including files using dynamic dependencies, make a
# difference between inclusion and import, as is done for %include and
# %import. 
#

A: [-d data/B];
A: [data//B]; # ?

#
# Search within predefined paths for %include ($STU_PATH or $STUPATH;
# the -I option)
#

% include c++.stu
 
#
# Optimization:  when parsing rules, only save the "body" part of the
# rule (everything except the target) as an unparsed string.  Parse it
# properly only when needed. 
#

#
# Flag rules
#

# Allow flags on the target filenames.  Example with '-o':

# If $NAME.svg is present, use it to build $NAME.pdf.  If $NAME.svg is
# not present, allow $NAME.pdf to be present without any dependencies.
# The big question is how can the rule distinguish when the rule is
# activated.  When all dependencies exist?  When all dependencies
# *could* be built? 
-o $NAME.pdf:  $NAME.svg
{
	inkscape ...
}

#
# Variables of the flags that apply to all children, not just immediate
# ones.  
#

$ stu '-E A'

# will completely ignore timestamps in all files.  

# This will also cover cases that are implemented as options at the
# moment, e.g. -g: 

$ stu '+o A'

# is equivalent to

$ stu -g A

# In this example, '\' is the negation operator. 

#
# Disable flags with '+' options
#

A: -o @x;
@x: +o B;

# Equivalent to
A: B;

